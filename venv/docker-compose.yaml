# this is the base of our yamlfile it will create a container for each service specified note that any file that is
# named other than docker-compose.yaml pill be preferred however you will be able to use both if you want to have
# files for a list of seprate groups of services this is usefull if you have services that are closely related and want
# to group them to make them more convienient to maintain.
services:
  # this will be a service for the database in this instance we will use postgres as it is the preferred database for
  #production django instances
  db:
    # you can set a specific version here if required in this case we will use the latest version since we are
    # demonstrateing how to create services defineing a specific version is useful in maintaining compatibility and
    # security
    # example:
    # image: postgres:14.5
    image: postgres:latest

    # this sets the .env file which will set the environment variables for the os within this specific container be sure
    # to put this in the gitignore file and avoid adding secrets in the prod environment by implementing a secrets vault
    # that injects this in the .env file in this example we have a .env template you can add for local testing
    env_file: .env

    # this section is commented out because we want a stateless environment which rebuilds the database each time the
    # application is built you can specify volumes here but you would want to mount them in the dockerfile if you need
    # to use cloud components like AWS cli
    # example:
    # - $HOST_DIR:$TARGET_DIR
    # or
    # /mnt/ebs:/var/lib/postgresql/data
    #volumes:
    #  - ./data/db:/var/lib/postgresql/data

    
    healthcheck:
      # Check if the database is ready
      # use the POSTGRES_USER and POSTGRES_PASSWORD environment variables to connect
        test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
        interval: 5s
        timeout: 5s
        retries: 3
  web:
    build: .
    # run the init.sh script
    command: sh -c "chmod +x ./init.sh && ./init.sh"
    env_file: .env
    volumes:
      - .:/code
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy